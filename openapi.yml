openapi: 3.0.3
info:
  title: Clover API
  version: 0.1.0
  description: API for managing resources on Ubicloud
servers:
  - url: 'https://api.ubicloud.com'
paths:
  /login:
    post:
      operationId: login
      summary: Login with user information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: user@mail.com
                password:
                  type: string
                  example: password
              required:
                - login
                - password
      responses:
        '200':
          description: Logged in successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: You have been logged in
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      security: []
      tags:
        - Login
  /project:
    get:
      operationId: listProjects
      summary: List all projects visible to the logged in user.
      parameters:
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/order_column'
      responses:
        '200':
          description: Return the list of all projects visible to the logged in user
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  count:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
      tags:
        - Project
    post:
      operationId: createProject
      summary: Create a new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: my-project-name
              required:
                - name
      responses:
        '200':
          description: Project is created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: InvalidRequest
        '401':
          description: Unauthorized
      security:
        - BearerAuth: []
      tags:
        - Project
  '/project/{project_id}':
    parameters:
      - $ref: '#/components/parameters/project_id'
    get:
      operationId: getProject
      summary: Retrieve a project
      responses:
        '200':
          description: Retrieved project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
      tags:
        - Project
    delete:
      operationId: deleteProject
      summary: Delete a project
      responses:
        '204':
          description: Project deleted successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
      tags:
        - Project
  '/project/{project_id}/vm':
    get:
      operationId: listProjectVMs
      summary: List all VMs created under the given project ID and visible to logged in user
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/order_column'
      responses:
        '200':
          description: Return the list of all VMs visible created under the given project and visible to the logged in user
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Vm'
                  count:
                    type: integer
        '401':
          description: Unauthorized
      tags:
        - Virtual Machine
  '/project/{project_id}/location/{location}/vm':
    get:
      operationId: listLocationVMs
      summary: List VMs in a specific location of a project
      parameters:
        - $ref: '#/components/parameters/project_id'
        - name: location
          in: path
          description: Return the list VMs created in a specific location of a project and visible to the logged in user
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/order_column'
      responses:
        '200':
          description: A list of VMs
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Vm'
                  count:
                    type: integer
        '401':
          description: Unauthorized
      tags:
        - Virtual Machine
  '/project/{project_id}/location/{location}/vm/{vm_name}':
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/location'
      - $ref: '#/components/parameters/vm_name'
    post:
      operationId: createVM
      summary: Create a new VM in a specific location of a project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                public_key:
                  description: Public SSH key for the VM
                  type: string
                size:
                  description: Size of the VM
                  type: string
                unix_user:
                  description: Unix user of the VM
                  type: string
                boot_image:
                  description: Boot image of the VM
                  type: string
                enable_ip4:
                  description: Enable IPv4
                  type: boolean
                private_subnet_id:
                  description: ID of the private subnet
                  type: string
                storage_size:
                  description: Requested storage size in GiB
                  type: integer
              required:
                - public_key
      responses:
        '200':
          description: Virtual machine created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmDetailed'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
      tags:
        - Virtual Machine
    get:
      operationId: getVMDetails
      summary: Get details of a specific VM in a location
      responses:
        '200':
          description: Details of the VM
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmDetailed'
        '401':
          description: Unauthorized
      tags:
        - Virtual Machine
    delete:
      operationId: deleteVM
      summary: Delete a specific VM
      responses:
        '204':
          description: VM deleted successfully
        '401':
          description: Unauthorized
      tags:
        - Virtual Machine
  '/project/{project_id}/location/{location}/vm/id/{vm_id}':
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/location'
      - $ref: '#/components/parameters/vm_id'
    get:
      operationId: getVMDetailsWithId
      summary: Get details of a specific VM in a location with ID
      responses:
        '200':
          description: Details of the VM
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmDetailed'
        '401':
          description: Unauthorized
      tags:
        - Virtual Machine
    delete:
      operationId: deleteVMWithId
      summary: Delete a specific VM with ID
      responses:
        '204':
          description: VM deleted successfully
        '401':
          description: Unauthorized
      tags:
        - Virtual Machine
  '/project/{project_id}/private-subnet':
    get:
      operationId: listPSs
      summary: List visible Private Subnets
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/order_column'
      responses:
        '200':
          description: A list of private subnets
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/PrivateSubnet'
                  count:
                    type: integer
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
        '404':
          description: Resource is not found
      tags:
        - Private Subnet
  '/project/{project_id}/location/{location}/private-subnet':
    get:
      operationId: listLocationPrivateSubnets
      summary: List Private Subnets in a specific location of a project
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/order_column'
      responses:
        '200':
          description: A list of Private Subnets in a location
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/PrivateSubnet'
                  count:
                    type: integer
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
        '404':
          description: Resource not found
      tags:
        - Private Subnet
  '/project/{project_id}/location/{location}/private-subnet/{private_subnet_name}':
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/location'
      - $ref: '#/components/parameters/private_subnet_name'
    post:
      operationId: createPrivateSubnet
      summary: Create a new Private Subnet in a specific location of a project
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                firewall_id:
                  type: string
      responses:
        '200':
          description: Private subnet is created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateSubnet'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      tags:
        - Private Subnet
    get:
      operationId: getPrivateSubnetDetails
      summary: Get details of a specific Private Subnet in a location
      responses:
        '200':
          description: Details of the private subnet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateSubnet'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          description: Resource not found
          $ref: '#/components/responses/Error'
      tags:
        - Private Subnet
    delete:
      operationId: deletePrivateSubnet
      summary: Delete a specific Private Subnet
      responses:
        '204':
          description: Private Subnet is deleted successfully
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
      tags:
        - Private Subnet
  '/project/{project_id}/location/{location}/private-subnet/id/{private_subnet_id}':
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/location'
      - $ref: '#/components/parameters/private_subnet_id'
    get:
      operationId: getPSDetailsWithId
      summary: Get details of a specific Private Subnet in a location with ID
      responses:
        '200':
          description: Details of the private subnet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateSubnet'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Private Subnet
    delete:
      operationId: deletePSWithId
      summary: Delete a specific Private Subnet with ID
      responses:
        '204':
          description: Private Subnet is deleted successfully
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Private Subnet
  '/project/{project_id}/postgres':
    get:
      operationId: listPostgresDatabases
      summary: List visible Postgres databases
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/order_column'
      responses:
        '200':
          description: A list of Postgres databases
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Postgres'
                  count:
                    type: integer
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Postgres
  '/project/{project_id}/location/{location}/postgres':
    get:
      operationId: listLocationPostgresDatabases
      summary: List Postgres databases in a specific location of a project
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/order_column'
      responses:
        '200':
          description: A list of Postgres databases in a specific location of a project
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Postgres'
                  count:
                    type: integer
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Postgres
  '/project/{project_id}/location/{location}/postgres/{postgres_database_name}':
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/location'
      - $ref: '#/components/parameters/postgres_database_name'
    post:
      operationId: createPostgresDatabase
      summary: Create a new Postgres database in a specific location of a project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                size:
                  description: Requested size for the underlying VM
                  type: string
                ha_type:
                  description: High availability type
                  type: string
                storage_size:
                  description: Requested storage size in GiB
                  type: integer
              required:
                - size
      responses:
        '200':
          description: Postgres database is created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresDetailed'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Postgres
    get:
      operationId: getPostgresDatabaseDetails
      summary: Get details of a specific Postgres database in a location
      responses:
        '200':
          description: Details of the Postgres database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresDetailed'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Postgres
    delete:
      operationId: deletePostgresDatabase
      summary: Delete a specific Postgres database
      responses:
        '204':
          description: Postgres database is deleted successfully
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Postgres
  '/project/{project_id}/location/{location}/postgres/{postgres_database_name}/restore':
    post:
      operationId: restorePostgresDatabase
      summary: Restore a new Postgres database in a specific location of a project
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/postgres_database_name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                restore_target:
                  type: string
              required:
                - 'name, restore_target'
      responses:
        '200':
          description: Postgres database is restored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresDetailed'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Postgres
  '/project/{project_id}/location/{location}/postgres/{postgres_database_name}/reset-superuser-password':
    post:
      operationId: resetSuperuserPassword
      summary: Reset superuser password of the Postgres database
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/postgres_database_name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
              required:
                - password
      responses:
        '200':
          description: Superuser password is updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresDetailed'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Postgres
  '/project/{project_id}/location/{location}/postgres/id/{postgres_database_id}':
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/location'
      - $ref: '#/components/parameters/postgres_database_id'
    get:
      operationId: getPostgresDetailsWithId
      summary: Get details of a specific Postgres database in a location with ID
      responses:
        '200':
          description: Details of the Postgres databases in a location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresDetailed'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Postgres
    delete:
      operationId: deletePostgresDatabaseWithID
      summary: Delete a specific Postgres database with ID
      responses:
        '204':
          description: Postgres database is deleted successfully
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Postgres
  '/project/{project_id}/location/{location}/postgres/id/{postgres_database_id}/restore':
    post:
      operationId: restorePostgresDatabaseWithID
      summary: Restore a new Postgres database in a specific location of a project with ID
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/postgres_database_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                restore_target:
                  type: string
              required:
                - 'name, restore_target'
      responses:
        '200':
          description: Postgres database is restored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Postgres'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Postgres
  '/project/{project_id}/location/{location}/postgres/id/{postgres_database_id}/reset-superuser-password':
    post:
      operationId: resetSuperuserPasswordWithID
      summary: Reset super-user password of the Postgres database
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/postgres_database_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
              required:
                - password
      responses:
        '200':
          description: Superuser password is updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresDetailed'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Postgres
  '/project/{project_id}/firewall/{firewall_id}/firewall-rule':
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/firewall_id'
    post:
      operationId: createFirewallRule
      summary: Create a new firewall rule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: string
                firewall_id:
                  type: string
                cidr:
                  description: CIDR of the firewall rule
                  type: string
                port_range:
                  description: Port range of the firewall rule
                  type: string
              required:
                - cidr
      responses:
        '200':
          description: Firewall rule created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallRule'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Firewall Rule
  '/project/{project_id}/firewall/{firewall_id}/firewall-rule/{firewall_rule_id}':
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/firewall_id'
      - $ref: '#/components/parameters/firewall_rule_id'
    get:
      operationId: getFirewallRuleDetails
      summary: Get details of a firewall rule
      responses:
        '200':
          description: Details of the firewall rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallRule'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Firewall Rule
    delete:
      operationId: deleteFirewallRule
      summary: Delete a specific firewall rule
      responses:
        '204':
          description: Firewall rule deleted successfully
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Firewall Rule
  '/project/{project_id}/firewall':
    parameters:
      - $ref: '#/components/parameters/project_id'
    get:
      responses:
        '200':
          description: Return the list of firewalls in the project
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Firewall'
                  count:
                    type: integer
    post:
      operationId: createFirewall
      summary: Create a new firewall
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Name of the firewall
                  type: string
                description:
                  description: Description of the firewall
                  type: string
              required:
                - name
      responses:
        '200':
          description: Firewall created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Firewall'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Firewall
  '/project/{project_id}/firewall/{firewall_id}':
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/firewall_id'
    get:
      operationId: getFirewallDetails
      summary: Get details of a specific firewall
      responses:
        '200':
          description: Details of the firewall
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Firewall'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Firewall
    delete:
      operationId: deleteFirewall
      summary: Delete a specific firewall
      responses:
        '204':
          description: Firewall deleted successfully
        '401':
          description: Unauthorized
          $ref: '#/components/responses/Error'
      tags:
        - Firewall
components:
  parameters:
    firewall_id:
      name: firewall_id
      in: path
      required: true
      schema:
        type: string
      description: ID of the firewall
    firewall_rule_id:
      name: firewall_rule_id
      in: path
      required: true
      schema:
        type: string
      description: ID of the firewall rule
    location:
      name: location
      in: path
      required: true
      schema:
        type: string
        example: eu-north-h1
      description: The Ubicloud location/region
    order_column:
      name: order_column
      in: query
      required: false
      schema:
        type: string
        default: id
      description: Pagination - Order column
    page_size:
      name: page_size
      in: query
      required: false
      schema:
        type: integer
        default: 10
      description: Pagination - Page size
    postgres_database_id:
      name: postgres_database_id
      in: path
      required: true
      schema:
        type: string
      description: Postgres database ID
    postgres_database_name:
      name: postgres_database_name
      in: path
      required: true
      schema:
        type: string
      description: Postgres database name
    private_subnet_id:
      name: private_subnet_id
      in: path
      required: true
      schema:
        type: string
      description: Private subnet ID
    private_subnet_name:
      name: private_subnet_name
      in: path
      required: true
      schema:
        type: string
      description: Private subnet name
    project_id:
      name: project_id
      in: path
      required: true
      schema:
        type: string
      description: ID of the project
    start_after:
      name: start_after
      in: query
      required: false
      schema:
        type: string
      description: Pagination - Start after
    vm_id:
      name: vm_id
      in: path
      required: true
      schema:
        type: string
      description: Virtual machine ID
    vm_name:
      name: vm_name
      in: path
      required: true
      schema:
        type: string
      description: Virtual machine name
  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              example: 401
            type:
              type: string
              example: InvalidCredentials
            message:
              type: string
              example: There was an error logging in
    Project:
      type: object
      properties:
        id:
          type: string
          example: pjw92xhhqjdy4g72xng1ubkda6
        name:
          description: Name of the project
          type: string
          example: my-project
        credit:
          description: Remaining credit of the project in $
          type: number
          format: float
          example: 25.4
        discount:
          description: Discount of the project as percentage
          type: integer
          example: 10
    Vm:
      type: object
      properties:
        id:
          description: ID of the VM
          type: string
          example: vmw12ouhqjdy4g72xng1ubkda6
        name:
          description: Name of the VM
          type: string
          example: my-vm-name
        state:
          description: State of the VM
          type: string
        location:
          description: Location of the VM
          type: string
          example: eu-north-h1
        size:
          description: Size of the underlying VM
          type: string
        unix_user:
          description: Unix user of the VM
          type: string
        storage_size_gib:
          description: Storage size in GiB
          type: integer
        ip6:
          description: IPv6 address
          type: string
          format: ipv6
        ip4:
          description: IPv4 address
          type: string
          format: ipv4
    VmDetailed:
      type: object
      properties:
        id:
          description: ID of the VM
          type: string
          example: vmw12ouhqjdy4g72xng1ubkda6
        name:
          description: Name of the VM
          type: string
          example: my-vm-name
        state:
          description: State of the VM
          type: string
        location:
          description: Location of the VM
          type: string
          example: eu-north-h1
        size:
          description: Size of the underlying VM
          type: string
        unix_user:
          description: Unix user of the VM
          type: string
        storage_size_gib:
          description: Storage size in GiB
          type: integer
        ip6:
          description: IPv6 address
          type: string
          format: ipv6
        ip4:
          description: IPv4 address
          type: string
          format: ipv4
        private_ipv6:
          description: Private IPv6 address
          type: string
          format: ipv6
        private_ipv4:
          description: Private IPv4 address
          type: string
          format: ipv4
        subnet:
          description: Subnet of the VM
          type: string
        firewalls:
          description: List of firewalls
          type: array
          items:
            $ref: '#/components/schemas/Firewall'
    Firewall:
      type: object
      properties:
        id:
          description: ID of the firewall
          type: string
        name:
          description: Name of the firewall
          type: string
        description:
          description: Description of the firewall
          type: string
        firewall_rules:
          description: List of firewall rules
          type: array
          items:
            $ref: '#/components/schemas/FirewallRule'
    FirewallRule:
      type: object
      properties:
        id:
          description: ID of the firewall rule
          type: string
        cidr:
          description: CIDR of the firewall rule
          type: string
        port_range:
          description: Port range of the firewall rule
          type: string
    Nic:
      type: object
      properties:
        id:
          description: ID of the NIC
          type: string
        name:
          description: Name of the NIC
          type: string
        private_ipv4:
          description: Private IPv4 address
          type: string
          format: ipv4
        private_ipv6:
          description: Private IPv6 address
          type: string
          format: ipv6
        vm_name:
          description: Name of the VM
          type: string
          nullable: true
    PrivateSubnet:
      type: object
      properties:
        id:
          description: ID of the subnet
          type: string
        name:
          description: Name of the subnet
          type: string
        location:
          description: Location of the subnet
          type: string
        net4:
          description: IPv4 CIDR of the subnet
          type: string
        net6:
          description: IPv6 CIDR of the subnet
          type: string
        nics:
          description: List of NICs
          type: array
          items:
            $ref: '#/components/schemas/Nic'
        firewalls:
          type: array
          items:
            $ref: '#/components/schemas/Firewall'
    PostgresFirewallRule:
      type: object
      properties:
        id:
          description: ID of the Postgres firewall rule
          type: string
        cidr:
          description: CIDR of the Postgres firewall rule
          type: string
    Postgres:
      type: object
      properties:
        id:
          description: ID of the Postgres database
          type: string
        name:
          description: Name of the Postgres database
          type: string
        state:
          description: State of the Postgres database
          type: string
        location:
          description: Location of the Postgres database
          type: string
        vm_size:
          description: Size of the underlying VM
          type: string
        storage_size_gib:
          description: Storage size in GiB
          type: integer
        ha_type:
          description: High availability type
          type: string
    PostgresDetailed:
      type: object
      properties:
        id:
          description: ID of the Postgres database
          type: string
        name:
          description: Name of the Postgres database
          type: string
        state:
          description: State of the Postgres database
          type: string
        location:
          description: Location of the Postgres database
          type: string
        vm_size:
          description: Size of the underlying VM
          type: string
        storage_size_gib:
          description: Storage size in GiB
          type: integer
        ha_type:
          description: High availability type
          type: string
        connection_string:
          description: Connection string to the Postgres database
          type: string
          nullable: true
        primary:
          description: Is the database primary
          type: boolean
        firewall_rules:
          description: List of Postgres firewall rules
          type: array
          items:
            $ref: '#/components/schemas/PostgresFirewallRule'
        earliest_restore_time:
          description: Earliest restore time (if primary)
          type: string
          nullable: true
        latest_restore_time:
          description: Latest restore time (if primary)"
          type: string
  responses:
    Error:
      description: an error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: []

