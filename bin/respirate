#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative "../loader"

d = Scheduling::Dispatcher.new
Signal.trap("TERM") { d.shutdown }

workers = [
  ["stresolvee4block0dnsnamesz", "ResolveGloballyBlockedDnsnames", "wait"],
  ["stcheckzvsagezalertszzzzza", "CheckUsageAlerts", "wait"],
  ["stexp1repr0ject1nv1tat10na", "ExpireProjectInvitations", "wait"],
  ["st10g0vmh0st0vt111zat10nzz", "LogVmHostUtilizations", "wait"],
  Config.heartbeat_url ? ["stheartbeatheartbheartheaz", "Heartbeat", "wait"] : nil,
  Config.github_app_id ? ["stredelivergith0bfail0reaz", "RedeliverGithubFailures", "wait", [{last_check_at: Time.now}]] : nil
]
workers.compact!

workers.each do |ubid, prog, label, stack|
  Strand.new(id: UBID.parse(ubid).to_uuid, prog:, label:, stack: stack || [{}]).insert_conflict(target: :id).save_changes
end

clover_freeze

loop do
  d.start_cohort
  next if d.wait_cohort > 0
  duration_slept = sleep 1
  Clog.emit("respirate finished sleep") { {sleep_duration_sec: duration_slept} }
end
